Vous DEVEZ fournir un fichier auteur nommé auteur dans le dossier racine de votre référentiel, comme toujours.
$> cat -e auteur
alafouas $
vbazenne $
$>

• Ce projet sera entièrement évalué par les humains. En tant que tel, vous êtes libre d'avoir une certaine variation entre les exemples de ce sujet et la sortie réelle de votre programme.
Cependant, vous devez obéir à l'esprit du sujet et activer un programme avec un format de sortie cohérent et pertinent.

• Pour les mêmes raisons, vous êtes entièrement libre de choisir vos noms de fichiers et votre hiérarchie générale. Mais gardez à l'esprit qu'une organisation de fichiers cohérente et pertinente est une bonne pratique de code et vous rapportera des points bonus.

• Tout arrêt inattendu, débordement de pile, erreur de segmentation, exception non interceptée ou comportement dangereux signifie une note de 0 - à l'exception de End_of_file.

• Vous pouvez utiliser les modules Pervasifs, String et List et toutes les syntaxes et sémantiques couvertes dans les vidéos de cette première semaine. En revanche, vous ne pouvez utiliser aucun des éléments suivants: ref, exceptions, tableaux, enregistrements mutables, objets. Si vous le faites, vous obtiendrez une note de -42 pour la tricherie.

• Vous êtes libre d'organiser vos fichiers et modules comme bon vous semble, mais vous devez activer un Makefile pour créer votre travail. Votre Makefile DOIT être capable de construire votre travail en tant qu'exécutable de bytecode et en tant qu'exécutable natif. De toute évidence, les deux fichiers binaires doivent se comporter exactement de la même manière. Vous pouvez utiliser OCamlMakeFile si vous le souhaitez

Cette semaine a été très amusante; ou du moins, j'espère que ce fut très amusant pour vous. Mais maintenant que vous avez perfectionné vos compétences en entraînement, en vous frayant un chemin dans la boue, la saleté et des exercices horriblement ennuyeux uniquement limités par votre imagination cruelle, voici votre temps pour vous lever et briller, et montrer au monde ce que vous pouvez faire avec ce que vous avez appris d'OCaml jusqu'à présent!

Cette première ruée sera votre tout premier programme complet et «complexe». Mais ne vous inquiétez pas, prenons quelques minutes pour que tout soit clair dans votre esprit, et je suis sûr que vous irez très bien.

Pendant les deux prochains jours, vous allez travailler sur un jeu de tic-tac-toe. Ce jeu est joué par deux joueurs sur un plateau de cellules 3x3.


Numérotons les cellules comme ceci:
1 2 3
4 5 6
7 8 9
Chaque joueur remplit une cellule, le joueur un avec O et le joueur deux avec X. Par convention, le joueur avec Os commence toujours. Le but du joueur est de faire une ligne droite avec trois de ses symboles.

X - -
O O O
- - X

O wins!

X - -
X O O
X O O

X wins!


C'est le simple tic-tac-toe; mais notre tic-tac-tic-tac-toe est un peu plus compliqué.
Chaque cellule est une planche elle-même, ce qui signifie qu'un jeu de tic-tac-tic-tac-toe est en fait un ensemble de neuf jeux de tic-tac-toe.
Les joueurs choisissent une cellule l'un après l'autre, en utilisant un format simple comme (ligne) (colonne). Aucune discipline de ligne n'est attendue. Utilisez un simple read_line et notez que ctrl-d ne sera pas testé en défense.


Les deux joueurs tentent de gagner la partie en remportant le plateau principal en remportant les grilles imbriquées. Si une grille imbriquée se termine par un match nul, le gagnant est celui qui place le dernier (et le neuvième) symbole dans la grille.

Le jeu se termine lorsqu'un joueur a une ligne droite de ses symboles sur le plateau principal.









































